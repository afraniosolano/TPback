/*
 * ptruora
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0.0a0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/json"
	"log"
	"net/http"

	"github.com/gorilla/mux"
)

func RestDomainResourceCLASSINSTANCEGetDomain(w http.ResponseWriter, r *http.Request) {

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	params := mux.Vars(r)
	nameDomain := params["name"]

	count := 0

	db := getConnection()

	rows, err := db.Query("select name,server_change,ssl_grade,previus_ssl_grade,logo,title,is_down FROM tbl_domain where name = '" + nameDomain + "';")
	if err != nil {
		log.Fatal(err)
	}
	defer rows.Close()
	for rows.Next() {
		var name string
		var serverChange bool
		var sslGrade string
		var previusSsl_grade string
		var logo string
		var title string
		var isDown bool

		if err := rows.Scan(&name, &serverChange, &sslGrade, &previusSsl_grade, &logo, &title, &isDown); err != nil {
			log.Fatal(err)
		}

		count++

		servidores := getServers(name)

		dominio1 := DomainParameters{
			ServerChange:    serverChange,
			SslGrade:        sslGrade,
			PreviusSslGrade: previusSsl_grade,
			Logo:            logo,
			Title:           title,
			IsDown:          isDown,
			Name:            name,
			Servers:         servidores,
		}

		json.NewEncoder(w).Encode(dominio1)
		w.WriteHeader(http.StatusOK)

	}

	if count == 0 {
		var message = Msg{
			"The domain '" + nameDomain + "' does not exist", 404,
		}
		json.NewEncoder(w).Encode(message)
		w.WriteHeader(http.StatusNotFound)
	}

}

func getServers(idDomain string) []ServerParameters {

	var servidores []ServerParameters

	db2 := getConnection()
	rows2, err2 := db2.Query("select id_domain,address,ssl_grade,country,owner FROM tbl_server where id_domain = '" + idDomain + "';")

	if err2 == nil {

		for rows2.Next() {
			var idDomain string
			var address string
			var sslGrade string
			var country string
			var owner string

			if err3 := rows2.Scan(&idDomain, &address, &sslGrade, &country, &owner); err3 == nil {

				item := ServerParameters{address, sslGrade, country, owner}

				servidores = append(servidores, item)

			}

		}

	}

	defer rows2.Close()

	return servidores
}
